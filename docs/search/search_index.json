{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Background Audiences is a framework for exploring the various audiences that are engaging with academic publications on Twitter. Audiences is written primarily in R, and collects data using the Twitter API. Setup Prerequisites and dependencies You will need a recent version of RStudio if you wish to use the interactive notebook capabilities. Dependencies Audiences requires several R packages to run. Twitter API access Once you have a developer account set up, copy and paste the API keys into config.yaml Running Audiences render_reports.R is a wrapper script to generate the reports for a list of papers. report_template.rmd is an R Markdown-formatted template. Serving as a webpage The reports are formatted as interactive HTML documents, making them ideal to share with others on a website. Each report is a self-contained .html file, so you can simply to your own personal website. (e.g., if you have a list of your lab's papers on your website, you can generate a report for each and add a link to the corresponding .html) Alternatively, if you have forked the Audiences Github repository, you can use Github pages to host the reports. I am using Hugo with the hugrid template to create a simple static landing page with tiles that link to static/reports/report.html . The website files are hosted in docs , and the Github project page is set up to point to this directory.","title":"Home"},{"location":"#background","text":"Audiences is a framework for exploring the various audiences that are engaging with academic publications on Twitter. Audiences is written primarily in R, and collects data using the Twitter API.","title":"Background"},{"location":"#setup","text":"","title":"Setup"},{"location":"#prerequisites-and-dependencies","text":"You will need a recent version of RStudio if you wish to use the interactive notebook capabilities.","title":"Prerequisites and dependencies"},{"location":"#dependencies","text":"Audiences requires several R packages to run.","title":"Dependencies"},{"location":"#twitter-api-access","text":"Once you have a developer account set up, copy and paste the API keys into config.yaml","title":"Twitter API access"},{"location":"#running-audiences","text":"render_reports.R is a wrapper script to generate the reports for a list of papers. report_template.rmd is an R Markdown-formatted template.","title":"Running Audiences"},{"location":"#serving-as-a-webpage","text":"The reports are formatted as interactive HTML documents, making them ideal to share with others on a website. Each report is a self-contained .html file, so you can simply to your own personal website. (e.g., if you have a list of your lab's papers on your website, you can generate a report for each and add a link to the corresponding .html) Alternatively, if you have forked the Audiences Github repository, you can use Github pages to host the reports. I am using Hugo with the hugrid template to create a simple static landing page with tiles that link to static/reports/report.html . The website files are hosted in docs , and the Github project page is set up to point to this directory.","title":"Serving as a webpage"},{"location":"demo/","text":"body { margin: 0; } div.col-md-3 { padding-left: 0; display: none; } ul.nav.bs-sidenav { display: none; } div.col-md-9 { padding-bottom: 100px; padding-left: 0px; padding-right: 0px; width: 100%; }","title":"Demo"},{"location":"usage/","text":"Setup Twitter API To reproduce these analyses or run Audiences on your own paper(s), you will first need to set up a Twitter developer account for access to the Twitter API. Documentation for setting up a Twitter dev account is available here . Once completed, copy and paste the app name, consumer keys, and access keys into the appropriate fields of config.yaml . Selecting papers to analyze Next, enter the Altmetric URLs for each paper into the file papers.txt (one per line). Note that these URLs must resolve to a subdomain which includes all tweets that have referenced the paper (e.g., for bioRxiv preprints, use https://biorxiv.altmetric.com/XXXXXX , and for preprints in the Cell family journals, use https://cell.altmetric.com/XXXXXX ; Neither of these will work with https://www.altmetric.com/XXXXXX , though this subdomain typically works for Nature and Science family journals). Note that not every paper will have full Twitter data available on an Altmetric page. An alternative (and more thorough) method that pulls data directly from Crossref is under development. Generate reports Running render_reports.R will generate a separate report for each of the papers listed in papers.txt by their Altmetric URLs (one per line). Reports are based on the report_template.rmd RMarkdown template. Output As each report runs, data scraped from the Twitter API will be cached to article_data/ to . Subsequent runs will look for the appropriate .rds files in this directory Reports will be written to output/reports/ and thumbnail images for each report to output/figures/ . Build site # generate data/items.toml, containing the links to reports to include in landing page python generate_links.py # build the landing page into _docs/static/ based on the hugrid Hugo template in themes/hugrid/ # - requires config.toml and data/items.toml hugo # build with mkdocs into docs/ # - requires mkdocs.yml and contents of _docs/ mkdocs build -d docs # copy the reports & thumbnails into docs/static/ rsync -r output/ docs/static # push changes to github and the documentation will be available at https://carjed.github.io/audiences/","title":"Usage"},{"location":"usage/#setup-twitter-api","text":"To reproduce these analyses or run Audiences on your own paper(s), you will first need to set up a Twitter developer account for access to the Twitter API. Documentation for setting up a Twitter dev account is available here . Once completed, copy and paste the app name, consumer keys, and access keys into the appropriate fields of config.yaml .","title":"Setup Twitter API"},{"location":"usage/#selecting-papers-to-analyze","text":"Next, enter the Altmetric URLs for each paper into the file papers.txt (one per line). Note that these URLs must resolve to a subdomain which includes all tweets that have referenced the paper (e.g., for bioRxiv preprints, use https://biorxiv.altmetric.com/XXXXXX , and for preprints in the Cell family journals, use https://cell.altmetric.com/XXXXXX ; Neither of these will work with https://www.altmetric.com/XXXXXX , though this subdomain typically works for Nature and Science family journals). Note that not every paper will have full Twitter data available on an Altmetric page. An alternative (and more thorough) method that pulls data directly from Crossref is under development.","title":"Selecting papers to analyze"},{"location":"usage/#generate-reports","text":"Running render_reports.R will generate a separate report for each of the papers listed in papers.txt by their Altmetric URLs (one per line). Reports are based on the report_template.rmd RMarkdown template.","title":"Generate reports"},{"location":"usage/#output","text":"As each report runs, data scraped from the Twitter API will be cached to article_data/ to . Subsequent runs will look for the appropriate .rds files in this directory Reports will be written to output/reports/ and thumbnail images for each report to output/figures/ .","title":"Output"},{"location":"usage/#build-site","text":"# generate data/items.toml, containing the links to reports to include in landing page python generate_links.py # build the landing page into _docs/static/ based on the hugrid Hugo template in themes/hugrid/ # - requires config.toml and data/items.toml hugo # build with mkdocs into docs/ # - requires mkdocs.yml and contents of _docs/ mkdocs build -d docs # copy the reports & thumbnails into docs/static/ rsync -r output/ docs/static # push changes to github and the documentation will be available at https://carjed.github.io/audiences/","title":"Build site"}]}